%%
include "T_INCLUDE"
include_once "T_INCLUDE_ONCE"
eval "T_EVAL"
require "T_REQUIRE"
require_once "T_REQUIRE_ONCE"
or "T_LOGICAL_OR"
xor "T_LOGICAL_XOR"
and "T_LOGICAL_AND"
print "T_PRINT"
yield "T_YIELD"
yield\sfrom "T_YIELD_FROM"
\+= "T_PLUS_EQUAL"
\-= "T_MINUS_EQUAL"
\*= "T_MUL_EQUAL"
/= "T_DIV_EQUAL"
\.= "T_CONCAT_EQUAL"
%= "T_MOD_EQUAL"
\&= "T_AND_EQUAL"
\|= "T_OR_EQUAL"
\^= "T_XOR_EQUAL"
<<= "T_SL_EQUAL"
>>= "T_SR_EQUAL"
\|\| "T_BOOLEAN_OR"
\&\& "T_BOOLEAN_AND"
== "T_IS_EQUAL"
!= "T_IS_NOT_EQUAL"
=== "T_IS_IDENTICAL"
!== "T_IS_NOT_IDENTICAL"
<= "T_IS_SMALLER_OR_EQUAL"
>= "T_IS_GREATER_OR_EQUAL"
<< "T_SL"
>> "T_SR"
<=> "T_SPACESHIP"
\?\? "T_COALESCE"
instanceof "T_INSTANCEOF"
\+\+ "T_INC"
\-\- "T_DEC"
\(int\) "T_INT_CAST"
\(double\) "T_DOUBLE_CAST"
\(string\) "T_STRING_CAST"
\(array\) "T_ARRAY_CAST"
\(object\) "T_OBJECT_CAST"
\(bool\) "T_BOOL_CAST"
\(unset\) "T_UNSET_CAST"
new "T_NEW"
clone "T_CLONE"
exit "T_EXIT"
if "T_IF"
elseif "T_ELSEIF"
else "T_ELSE"
endif "T_ENDIF"
0x[0-9A-Fa-f]+|[0-9]+ "T_LNUMBER"
[0-9]+\.[0-9]+([eE][0-9]+)?[fFdD]?|[0-9]+[eE][0-9]+[fFdD]? "T_DNUMBER"
\$[a-zA-Z_][a-zA-Z_0-9]* "T_VARIABLE"
echo "T_ECHO"
do "T_DO"
while "T_WHILE"
endwhile "T_ENDWHILE"
for "T_FOR"
endfor "T_ENDFOR"
foreach "T_FOREACH"
endforeach "T_ENDFOREACH"
declare "T_DECLARE"
enddeclare "T_ENDDECLARE"
as "T_AS"
switch "T_SWITCH"
endswitch "T_ENDSWITCH"
case "T_CASE"
default "T_DEFAULT"
break "T_BREAK"
continue "T_CONTINUE"
goto "T_GOTO"
function "T_FUNCTION"
const "T_CONST"
return "T_RETURN"
try "T_TRY"
catch "T_CATCH"
finally "T_FINALLY"
throw "T_THROW"
use "T_USE"
insteadof "T_INSTEADOF"
global "T_GLOBAL"
static "T_STATIC"
abstract "T_ABSTRACT"
final "T_FINAL"
private "T_PRIVATE"
protected "T_PROTECTED"
public "T_PUBLIC"
var "T_VAR"
unset "T_UNSET"
isset "T_ISSET"
empty "T_EMPTY"
__halt_compiler "T_HALT_COMPILER"
class|Class "T_CLASS"
trait "T_TRAIT"
interface "T_INTERFACE"
extends "T_EXTENDS"
implements "T_IMPLEMENTS"
-> "T_OBJECT_OPERATOR"
=> "T_DOUBLE_ARROW"
list "T_LIST"
array "T_ARRAY"
callable "T_CALLABLE"
__CLASS__ "T_CLASS_C"
__TRAIT__ "T_TRAIT_C"
__METHOD__ "T_METHOD_C"
__FUNCTION__ "T_FUNC_C"
__LINE__ "T_LINE"
__FILE__ "T_FILE"
\$\{ "T_DOLLAR_OPEN_CURLY_BRACES"
\{\$ "T_CURLY_OPEN"
:: "T_PAAMAYIM_NEKUDOTAYIM"
namespace "T_NAMESPACE"
__NAMESPACE__ "T_NS_C"
__DIR__ "T_DIR"
\\\\ "T_NS_SEPARATOR"
\.\.\. "T_ELLIPSIS"
\*\* "T_POW"
\*\*= "T_POW_EQUAL"
[a-zA-Z_][a-zA-Z_0-9]* "T_STRING"
"(?:\\"|[^"])*"|'(?:\\'|[^'])*' "T_CONSTANT_ENCAPSED_STRING"
(//|#)[^\r\n]*|/\*([^\*]|\*[^/]|\*\*)*\*/ ;
[\n\r\t ] ;
! "!"
" """
\$ "$"
% "%"
& "&"
\( "("
\) ")"
\* "*"
\+ "+"
, ","
- "-"
\. "."
/ "/"
: ":"
; ";"
< "<"
= "="
\? "?"
> ">"
@ "@"
\[ "["
\] "]"
\^ "^"
` "`"
\{ "{"
\} "}"
\| "|"
~ "~"
